input {
  pipeline {
    address => "fhir-encounter"
  }
}

filter {
  # TODO add contitional for encounter type

  mutate {
    add_field => {
      "[registration][facilityID]" => "%{[resource][serviceProvider][reference]}"
    }
  }

  mutate {
    gsub => ["[registration][facilityID]", "Organization/", ""]
  }

  elasticsearch {
    hosts => [ "es-analytics:9200" ]
    user => "elastic"
    password => "dev_password_only"
    index => "fhir-raw-organization"
    query => "resource.id:%{[registration][facilityID]}"
    fields => {
      "[resource][address]" => "[@metadata][address]"
      "[resource][name]" => "[registration][facility][name]"
      "[resource][identifier]" => "[@metadata][identifier]"
    }
    remove_field => ["[registration][facilityID]"]
    add_field => {
      "[registration][facility][country]" => "%{[@metadata][address][0][country]}"
      "[registration][facility][state]" => "%{[@metadata][address][0][state]}"
      "[registration][facility][district]" => "%{[@metadata][address][0][district]}"
      "[registration][facility][city]" => "%{[@metadata][address][0][city]}"
    }
  }

  ruby {
    code => '
      identifiers = event.get("[@metadata][identifier]")
      hfuid = identifiers.find { |x| x["system"] == "http://test.org/identifier/hiv-organization"}["value"]
      event.set("[registration][facilityCode]", hfuid)
    '
  }

  mutate {
    add_field => {
      "subject" => "%{[resource][subject][reference]}"
    }
  }

  mutate {
    gsub => [ "subject", "http://opencr:3000/fhir/", "" ]
  }

  mutate {
    gsub => ["subject", "Patient/", ""]
  }

  mutate {
    add_field => {
      "[@metadata][id]" => "report-patient-%{[subject]}"
    }
  }

  prune {
    whitelist_names => [ "registration", "@timestamp" ]
  }
}

output {
  elasticsearch {
    hosts => [ "es-analytics:9200" ]
    index => "fhir-report-patient"
    document_id => "%{[@metadata][id]}"
    action => "update"
    doc_as_upsert => true
    user => "elastic"
    password => "dev_password_only"
  }
}
