input {
  http {
    port => 5077
  }
}

filter {
  split {}

  csv {
    autodetect_column_names => true
    skip_header => true
  }

  de_dot {
    nested => true
  }

  # enrichment
  elasticsearch {
    hosts => [ "es-analytics:9200" ]
    user => "elastic"
    password => "dev_password_only"
    index => "fhir-raw-organization"
    query => "resource.identifier.value:%{[registration][facilityCode]}"
    fields => {
      "[resource][address]" => "[@metadata][address]"
      "[resource][name]" => "[registration][facility][name]"
      "[resource][identifier]" => "[@metadata][identifier]"
    }
    remove_field => ["[registration][facilityID]"]
    add_field => {
      "[registration][facility][country]" => "%{[@metadata][address][0][country]}"
      "[registration][facility][state]" => "%{[@metadata][address][0][state]}"
      "[registration][facility][district]" => "%{[@metadata][address][0][district]}"
      "[registration][facility][city]" => "%{[@metadata][address][0][city]}"
    }
  }

  # create FHIR patient for CR
  ruby {
    code => '
      event.set("[@metadata][fhirPatient][resourceType]", "Patient")
      event.set("[@metadata][fhirPatient][identifier]", [{"system" => "https://instantopenhie.org/client1", "value" => event.get("[registration][clientSourceId]")}])
      event.set("[@metadata][fhirPatient][active]", true)
      event.set("[@metadata][fhirPatient][name]", [{"use" => "official", "family" => event.get("[registration][lastName]"), "given" => [event.get("[registration][firstName]")]}])
      event.set("[@metadata][fhirPatient][gender]", event.get("[registration][gender]"))
      event.set("[@metadata][fhirPatient][birthDate]", event.get("[registration][birthDate]"))
    '
  }

  # submit patient to CR
  http {
    body => "%{[@metadata][fhirPatient]}"
    body_format => "json"
    verb => "POST"
    url => "http://opencr:3000/fhir/Patient"
    headers => {
      "Content-Type" => "application/fhir+json"
      "X-OpenHIM-ClientID" => "test"
    }
    target_headers => "[@metadata][crResHeaders]"
  }

  mutate {
    gsub => [ "[@metadata][crResHeaders][location]", "Patient/", "" ]
    gsub => [ "[@metadata][crResHeaders][locationcruid]", "Patient/", "" ]
  }

  mutate {
    add_field => {
      "[@metadata][id]" => "report-patient-%{[@metadata][crResHeaders][location]}"
    }
  }

  fingerprint {
    source => "[@metadata][crResHeaders][locationcruid]"
    target => "[registration][golden_id_fingerprint]"
  }

  # extract nested properties
  mutate {
    split => { "[cd4][collectionDate]" => "|" }
    split => { "[cd4][result]" => "|" }
    split => { "[cd4][percentage]" => "|" }
    split => { "[artRegimenSwitch][date]" => "|" }
    split => { "[artRegimenSwitch][line]" => "|" }
    split => { "[artRegimenSwitch][regimen]" => "|" }
    split => { "[viralSuppression][date]" => "|" }
    split => { "[viralSuppression][result]" => "|" }
    split => { "[viralSuppression][interpretation]" => "|" }
  }

  ruby {
    code => '
      cd4 = []
      cd4CollectionDate = event.get("[cd4][collectionDate]")
      cd4CollectionDate.each_with_index { |val, index|
        cd4 << { "collectionDate" => val, "result" => event.get("[cd4][result][#{index}]"), "percentage" => event.get("[cd4][percentage][#{index}]") }
      }
      event.set("[cd4][nested]", cd4)
    '
    remove_field => [ "[cd4][collectionDate]", "[cd4][result]", "[cd4][percentage]" ]
  }

  ruby {
    code => '
      artRegimenSwitch = []
      artRegimenSwitchDate = event.get("[artRegimenSwitch][date]")
      artRegimenSwitchDate.each_with_index { |val, index|
        artRegimenSwitch << { "date" => val, "line" => event.get("[artRegimenSwitch][line][#{index}]"), "regimen" => event.get("[artRegimenSwitch][regimen][#{index}]") }
      }
      event.set("[artRegimenSwitch][nested]", artRegimenSwitch)
    '
    remove_field => [ "[artRegimenSwitch][date]", "[artRegimenSwitch][line]", "[artRegimenSwitch][regimen]" ]
  }

  ruby {
    code => '
      viralSuppression = []
      viralSuppressionDate = event.get("[viralSuppression][date]")
      viralSuppressionDate.each_with_index { |val, index|
        viralSuppression << { "date" => val, "result" => event.get("[viralSuppression][result][#{index}]"), "interpretation" => event.get("[viralSuppression][interpretation][#{index}]") }
      }
      event.set("[viralSuppression][nested]", viralSuppression)
    '
    remove_field => [ "[viralSuppression][date]", "[viralSuppression][result]", "[viralSuppression][interpretation]" ]
  }

  prune {
    whitelist_names => [ "registration", "hivDiagnosis", "entryToCare", "artInitiation", "cd4", "artRegimenSwitch", "viralSuppression", "death", "@timestamp" ]
  }
}

output {
  elasticsearch {
    hosts => [ "es-analytics:9200" ]
    index => "fhir-report-patient"
    document_id => "%{[@metadata][id]}"
    action => "index"
    user => "elastic"
    password => "dev_password_only"
  }
}
